{-# LANGUAGE BangPatterns #-}
import qualified Data.ByteString.Lazy.Char8 as L
import qualified Data.ByteString.Char8 as C
import Data.Maybe(fromJust)
import Data.Array.Unboxed

ans = listArray (1, 1000) [0,-1,-1,-1,-1,-1,5,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,4,-1,-1,-1,3,-1,-1,-1,-1,3,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,3,-1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,4,-1,-1,3,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,-1,-1,5,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,4,-1,3,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,3,-1,-1,-1,-1,-1,5,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,5,-1,-1,-1,-1,-1,-1,-1,2,3,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,5,-1,-1,-1,-1,-1,5,3,-1,-1,-1,-1,-1,5,-1,-1,5,-1,5,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,5,-1,-1,6,-1,5,5,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,6,-1,-1,-1,4,-1,-1,5,-1,-1,-1,-1,5,5,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,4,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,6,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,5,5,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,6,-1,5,5,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,6,-1,-1,-1,6,-1,3,4,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,3,-1,5,-1,-1,-1,-1,-1,-1,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,4,-1,-1,4,-1,-1,3,-1,-1,4,-1,3,5,-1,-1,-1,-1,-1,-1,-1,3,-1,5,-1,-1,-1,-1,-1,-1,-1,5,5,-1,-1,-1,-1,6,-1,-1,4,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,1] :: UArray Int Int

square 0 = 0
square 1 = 1
square 2 = 4
square 3 = 9
square 4 = 16
square 5 = 25
square 6 = 36
square 7 = 49
square 8 = 64
square 9 = 81

hpy2 x
  | x <= 1000 = ans ! x
  | otherwise = case (ans!s) of
    -1 -> -1
    k -> succ k
  where sqsum 0 = 0
        sqsum n = r + sqsum d
          where !(!d, !m) = n `quotRem` 10
                !r = square m
        !s = sqsum x

readint = fst . fromJust . C.readInt

pr :: [Int] -> String
pr = foldr p1 ""
  where p1 x = shows x . showString "\n"
        
--

process1 = putStr . pr .  map (hpy2 . readint) . C.lines

processinputs [] = return ()
processinputs (c:[]) = process1 c
processinputs (c1:c2:cs) = process1 c1' >> processinputs (c2' : cs)
  where (c1', c1'') = C.breakEnd (=='\n') c1
        c2' = C.concat [c1'', c2]

processall = processinputs . L.toChunks . L.tail . snd . L.break (== '\n')

main = L.getContents >>= processall
